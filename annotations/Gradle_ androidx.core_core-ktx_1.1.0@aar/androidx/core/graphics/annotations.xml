<root>
    <item name='androidx.core.graphics.BitmapKt void set(android.graphics.Bitmap, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path minus(android.graphics.Path, android.graphics.Path)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix rotationMatrix$default(float, float, float, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.Rect, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt void forEach(android.graphics.Region, kotlin.jvm.functions.Function1&lt;? super android.graphics.Rect,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.ColorSpace getColorSpace(long)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt java.lang.Iterable flatten$default(android.graphics.Path, float, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF toPointF(android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.RectF, android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect minus(android.graphics.Rect, android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point minus(android.graphics.Point, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point plus(android.graphics.Point, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withMatrix(android.graphics.Canvas, android.graphics.Matrix, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path plus(android.graphics.Path, android.graphics.Path)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt long convertTo(int, android.graphics.ColorSpace) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF and(android.graphics.RectF, android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt int get(android.graphics.Bitmap, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color plus(android.graphics.Color, android.graphics.Color) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect and(android.graphics.Rect, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt boolean contains(android.graphics.Region, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt java.lang.Iterable&lt;androidx.core.graphics.PathSegment&gt; flatten(android.graphics.Path, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap.Config) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt float component1(android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect toRect(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withTranslation(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point minus(android.graphics.Point, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap.Config, boolean, android.graphics.ColorSpace) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt int component1(android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PictureKt android.graphics.Picture record(android.graphics.Picture, int, int, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF or(android.graphics.RectF, android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.Rect, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withMatrix(android.graphics.Canvas, android.graphics.Matrix, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF and(android.graphics.RectF, android.graphics.RectF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withScale(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSkew$default(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix scaleMatrix$default(float, float, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF toRectF(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt boolean contains(android.graphics.Region, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt float component4(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withMatrix$default(android.graphics.Canvas, android.graphics.Matrix, kotlin.jvm.functions.Function1, int, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, int, int, int, int, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Path, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withTranslation$default(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt float component2(android.graphics.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect or(android.graphics.Rect, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path xor(android.graphics.Path, android.graphics.Path)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PorterDuffKt android.graphics.PorterDuffColorFilter toColorFilter(android.graphics.PorterDuff.Mode, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region toRegion(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region not(android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSkew(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt void forEach(android.graphics.Region, kotlin.jvm.functions.Function1&lt;? super android.graphics.Rect,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap applyCanvas(android.graphics.Bitmap, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point plus(android.graphics.Point, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Path, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withMatrix(android.graphics.Canvas, android.graphics.Matrix, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt boolean contains(android.graphics.Bitmap, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap$default(int, int, android.graphics.Bitmap.Config, boolean, android.graphics.ColorSpace, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region toRegion(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt long convertTo(int, android.graphics.ColorSpace.Named) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF unaryMinus(android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt int component2(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withMatrix$default(android.graphics.Canvas, android.graphics.Matrix, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point unaryMinus(android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withTranslation(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color convertTo(android.graphics.Color, android.graphics.ColorSpace.Named) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap applyCanvas(android.graphics.Bitmap, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap$default(int, int, android.graphics.Bitmap.Config, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Rect, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Region) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt boolean contains(android.graphics.Bitmap, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt float component1(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix times(android.graphics.Matrix, android.graphics.Matrix)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt float[] values(android.graphics.Matrix)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF plus(android.graphics.PointF, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point plus(android.graphics.Point, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect or(android.graphics.Rect, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt float[] values(android.graphics.Matrix) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt java.util.Iterator&lt;android.graphics.Rect&gt; iterator(android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withScale(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path and(android.graphics.Path, android.graphics.Path) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Region) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point minus(android.graphics.Point, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Rect, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point unaryMinus(android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt boolean contains(android.graphics.Bitmap, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.RectF, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect minus(android.graphics.Rect, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt int component2(android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt float component2(android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PorterDuffKt android.graphics.PorterDuffXfermode toXfermode(android.graphics.PorterDuff.Mode)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.RectF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Region) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path and(android.graphics.Path, android.graphics.Path) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSkew$default(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt float component1(android.graphics.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix translationMatrix$default(float, float, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.RectF, android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.RectF, android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.RectF, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.Rect, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap scale(android.graphics.Bitmap, int, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PictureKt android.graphics.Picture record(android.graphics.Picture, int, int, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path and(android.graphics.Path, android.graphics.Path)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color convertTo(android.graphics.Color, android.graphics.ColorSpace.Named) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt.iterator.1 java.lang.Object next()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt java.util.Iterator&lt;android.graphics.Rect&gt; iterator(android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt int component3(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color plus(android.graphics.Color, android.graphics.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt java.lang.Iterable&lt;androidx.core.graphics.PathSegment&gt; flatten(android.graphics.Path, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF or(android.graphics.RectF, android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap.Config, boolean, android.graphics.ColorSpace) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region plus(android.graphics.Region, android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect toRect(android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point minus(android.graphics.Point, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.RectF, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF minus(android.graphics.PointF, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withScale$default(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.Rect, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path xor(android.graphics.Path, android.graphics.Path) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt float component2(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap scale$default(android.graphics.Bitmap, int, int, boolean, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color plus(android.graphics.Color, android.graphics.Color)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region toRegion(android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt long convertTo(long, android.graphics.ColorSpace) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF or(android.graphics.RectF, android.graphics.RectF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect and(android.graphics.Rect, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt int component1(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path minus(android.graphics.Path, android.graphics.Path) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap.Config, boolean, android.graphics.ColorSpace)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.Rect, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap.Config)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point plus(android.graphics.Point, android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PorterDuffKt android.graphics.PorterDuffXfermode toXfermode(android.graphics.PorterDuff.Mode) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region xor(android.graphics.Region, android.graphics.Region) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path minus(android.graphics.Path, android.graphics.Path) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.RectF, android.graphics.RectF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt float component4(android.graphics.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path plus(android.graphics.Path, android.graphics.Path) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect minus(android.graphics.Rect, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region or(android.graphics.Region, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect or(android.graphics.Rect, android.graphics.Rect) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap applyCanvas(android.graphics.Bitmap, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point minus(android.graphics.Point, android.graphics.Point)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF minus(android.graphics.PointF, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.RectF, android.graphics.RectF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt boolean contains(android.graphics.RectF, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt int toColorInt(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Rect, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect minus(android.graphics.Rect, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF minus(android.graphics.PointF, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt android.graphics.Bitmap scale(android.graphics.Bitmap, int, int, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withScale$default(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix times(android.graphics.Matrix, android.graphics.Matrix) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF toPointF(android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt int component4(android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect minus(android.graphics.Rect, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF minus(android.graphics.RectF, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point toPoint(android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PictureKt android.graphics.Picture record(android.graphics.Picture, int, int, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path xor(android.graphics.Path, android.graphics.Path) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region minus(android.graphics.Region, android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF minus(android.graphics.PointF, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region minus(android.graphics.RectF, android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect plus(android.graphics.Rect, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withRotation$default(android.graphics.Canvas, float, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix rotationMatrix(float, float, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix times(android.graphics.Matrix, android.graphics.Matrix) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF minus(android.graphics.RectF, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region xor(android.graphics.Rect, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withRotation(android.graphics.Canvas, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point toPoint(android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt boolean contains(android.graphics.Rect, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color convertTo(android.graphics.Color, android.graphics.ColorSpace) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSkew(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.BitmapKt boolean contains(android.graphics.Bitmap, android.graphics.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix scaleMatrix(float, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path or(android.graphics.Path, android.graphics.Path) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF minus(android.graphics.RectF, android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF plus(android.graphics.PointF, android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region and(android.graphics.Region, android.graphics.Region) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, android.graphics.Path, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt boolean contains(android.graphics.Rect, android.graphics.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.Point plus(android.graphics.Point, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt float component3(android.graphics.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF plus(android.graphics.PointF, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color convertTo(android.graphics.Color, android.graphics.ColorSpace) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PorterDuffKt android.graphics.PorterDuffColorFilter toColorFilter(android.graphics.PorterDuff.Mode, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt boolean contains(android.graphics.RectF, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt float component3(android.graphics.RectF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF minus(android.graphics.RectF, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF minus(android.graphics.PointF, android.graphics.PointF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ShaderKt void transform(android.graphics.Shader, kotlin.jvm.functions.Function1&lt;? super android.graphics.Matrix,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color toColor(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path or(android.graphics.Path, android.graphics.Path)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt.iterator.1 android.graphics.Rect next()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF plus(android.graphics.RectF, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF transform(android.graphics.RectF, android.graphics.Matrix) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region unaryMinus(android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF minus(android.graphics.RectF, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSave(android.graphics.Canvas, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region unaryMinus(android.graphics.Region) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, float, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.MatrixKt android.graphics.Matrix translationMatrix(float, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF unaryMinus(android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF and(android.graphics.RectF, android.graphics.RectF)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF plus(android.graphics.PointF, android.graphics.PointF) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ShaderKt void transform(android.graphics.Shader, kotlin.jvm.functions.Function1&lt;? super android.graphics.Matrix,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt long convertTo(long, android.graphics.ColorSpace.Named) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt java.lang.Iterable flatten$default(android.graphics.Path, float, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path plus(android.graphics.Path, android.graphics.Path) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF transform(android.graphics.RectF, android.graphics.Matrix) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withSave(android.graphics.Canvas, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withClip(android.graphics.Canvas, int, int, int, int, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RegionKt android.graphics.Region not(android.graphics.Region)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Region toRegion(android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withTranslation$default(android.graphics.Canvas, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ColorKt android.graphics.Color toColor(long)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.ImageDecoderKt android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source, kotlin.jvm.functions.Function3&lt;? super android.graphics.ImageDecoder,? super android.graphics.ImageDecoder.ImageInfo,? super android.graphics.ImageDecoder.Source,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withRotation$default(android.graphics.Canvas, float, float, float, kotlin.jvm.functions.Function1, int, java.lang.Object) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.Rect and(android.graphics.Rect, android.graphics.Rect) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF transform(android.graphics.RectF, android.graphics.Matrix)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PointKt android.graphics.PointF plus(android.graphics.PointF, android.graphics.PointF) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.PathKt android.graphics.Path or(android.graphics.Path, android.graphics.Path) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.RectKt android.graphics.RectF toRectF(android.graphics.Rect)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='androidx.core.graphics.CanvasKt void withRotation(android.graphics.Canvas, float, float, float, kotlin.jvm.functions.Function1&lt;? super android.graphics.Canvas,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
